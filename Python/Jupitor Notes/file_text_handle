{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "file closed or not True\n"
     ]
    }
   ],
   "source": [
    "with open('demo.txt','w') as f:\n",
    "    pass\n",
    "print(\"file closed or not\",f.closed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to python programming\n",
      "This is code to file handling\n",
      "Handling text\n",
      "Read text\n",
      "write text\n",
      "Append text\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open('t_text.txt','r') as f:\n",
    "     f_contents = f.read()\n",
    "     print(f_contents)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Welcome to python programming\\n', 'This is code to file handling\\n', 'Handling text\\n', 'Read text\\n', 'write text\\n', 'Append text\\n']\n"
     ]
    }
   ],
   "source": [
    "with open('t_text.txt','r') as f:\n",
    "     f_contents = f.readlines()\n",
    "     print(f_contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to python programming\n",
      "\n",
      "This is code to file handling\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open('t_text.txt','r') as f:\n",
    "     f_contents = f.readline()\n",
    "     print(f_contents)\n",
    "     f_contents = f.readline()\n",
    "     print(f_contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to python programming\n",
      "This is code to file handling\n"
     ]
    }
   ],
   "source": [
    "with open('t_text.txt','r') as f:\n",
    "        f_contents = f.readline()\n",
    "        print(f_contents, end = '')\n",
    "        f_contents = f.readline()\n",
    "        print(f_contents, end = '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to python programming\n",
      "This is code to file handling\n",
      "Handling text\n",
      "Read text\n",
      "write text\n",
      "Append text\n"
     ]
    }
   ],
   "source": [
    "with open('t_text.txt','r') as f:\n",
    "    for line in f:\n",
    "        print(line, end = '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to python programming\n",
      "This is code to file handling\n",
      "Handling text\n",
      "Read text\n",
      "write text\n",
      "Append text\n"
     ]
    }
   ],
   "source": [
    "with open('t_text.txt','r') as f:\n",
    "    f_contents = f.read()\n",
    "    print(f_contents, end = '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to\n",
      "r\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "with open('t_text.txt','r') as f:\n",
    "    ###Printing by characters:\n",
    "    f_contents = f.read(10)\n",
    "    print(f_contents)\n",
    "    '''f_contents = f.read(10)\n",
    "    print(f_contents, end = '')\n",
    "    f_contents = f.read(10)\n",
    "    print(f_contents, end = '')'''\n",
    "print(f.mode)\n",
    "print(f.closed)\n",
    "#print(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open(\"test2.txt\", \"w\") as f:\n",
    "    \n",
    "    f.write(\"Test\")\n",
    "    #f.seek(0)\n",
    "    #tell()\n",
    "\t#f.write(\"Test\")\n",
    "\t#f.seek(\"R\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"t_text.txt\", \"r\") as rf:\n",
    "    with open(\"test_copy.txt\", \"w\") as wf:\n",
    "        for line in rf:\n",
    "            wf.write(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open(\"t_text.txt\", \"r\") as rf:\n",
    "     f_contents = rf.read()\n",
    "        \n",
    "with open('test.txt','w') as wf:\n",
    "    wf.write(f_contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to python programming\n",
      "This is code to file handling\n",
      "Handling text\n",
      "Read text\n",
      "write text\n",
      "Append text\n",
      "welcome programming\n",
      "\n"
     ]
    }
   ],
   "source": [
    "words=open('t_text.txt').read()\n",
    "print(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "re.findall('^W.+g$',words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Welcome to python programming', 'welcome programming']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "re.findall('^W.+g$',words,re.M|re.I)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Welcome to python programming', 'welcome programming']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#\n",
    "re.findall('''\n",
    "^W    # string must start with w or W\n",
    ".+    #Find some char in middle\n",
    "g$    #end eith G or g\n",
    "''',\n",
    "          words,\n",
    "          re.M|re.I|re.VERBOSE)#re.X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
