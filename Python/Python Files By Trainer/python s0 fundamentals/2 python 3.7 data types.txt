----------------------------------------------------------------------------
			python data types
----------------------------------------------------------------------------
			Variables Example:
----------------------------------------------------------------------------
counter = 100         # An integer assignment
miles   = 1000.0      # A floating point
name    = "John"      # A string

print (counter)
print (miles)
print (name)
----------------------------------------------------------------------------
			Multiple Assignment Example:
----------------------------------------------------------------------------
a = b = c = 1
print(a)
print(b)
print(c)
----------------------------------------------------------------------------
			Multiple Assignment Example:
----------------------------------------------------------------------------
a,b,c = 1,2,"anil"
print(a)
print(b)
print(c)
----------------------------------------------------------------------------
			Basic  Data Types
----------------------------------------------------------------------------
		1.	Numbers
----------------------------------------------------------------------------
		2.	String
----------------------------------------------------------------------------
		3.	List
----------------------------------------------------------------------------
		4.	Tuple
----------------------------------------------------------------------------
		5.	Dictionary
----------------------------------------------------------------------------
			Numbers
----------------------------------------------------------------------------
Number data types store numeric values. Number objects are created when 
you assign a value to them.
----------------------------------------------------------------------------
var1 = 1
var2 = 10
----------------------------------------------------------------------------
You can also delete the reference to a number object by using the 
del statement
----------------------------------------------------------------------------
del var1
del var1,var2
----------------------------------------------------------------------------
			Numerical Types
----------------------------------------------------------------------------
int 	(signed integers)
----------------------------------------------------------------------------
long 	(long integers,can also be represented in octal and hexadecimal)
----------------------------------------------------------------------------
float 	(floating point real values)
----------------------------------------------------------------------------
complex (complex numbers)
----------------------------------------------------------------------------
int Examples:
----------------------------------------------------------------------------
10	100	-786	080	-0490	-0x260	0x69
----------------------------------------------------------------------------
long Examples:
----------------------------------------------------------------------------
51924361L	-0x19323L	0122L	0xDEFABCECBDAECBFBAEl
535633629843L	-052318172735L	-4721885298529L
----------------------------------------------------------------------------
float Examples:
----------------------------------------------------------------------------
0.0		15.20	-21.9	32.3+e18	-90.	-32.54e100
70.2-E12
----------------------------------------------------------------------------
complex
----------------------------------------------------------------------------
3.14j	45.j	9.322e-36j	.876j	-.6545+0J	3e+26J	4.53e-7j
----------------------------------------------------------------------------
Python allows you to use a lowercase "l" with long, but it is recommended 
that you use only an uppercase "L" to avoid confusion with the number 1. 
----------------------------------------------------------------------------
Python displays long integers with an uppercase L.
----------------------------------------------------------------------------
A complex number consists of an ordered pair of real floating-point 
numbers denoted by x + yj, where x and y are the real numbers and j is 
the imaginary unit.
----------------------------------------------------------------------------
			Strings
----------------------------------------------------------------------------
Strings in Python are identified as a contiguous set of characters 
represented in the quotation marks. 
----------------------------------------------------------------------------
Python allows for either pairs of single or double quotes. 
----------------------------------------------------------------------------
Subsets of strings can be taken using the slice operator ([ ] and [:] ) 
with indexes starting at 0 in the beginning of the string and working 
their way from -1 at the end.
----------------------------------------------------------------------------
The plus (+) sign is the string concatenation operator and the 
asterisk (*) is the repetition operator
----------------------------------------------------------------------------
			String Example:
----------------------------------------------------------------------------
str = 'Hello World!'
print (str)          # Prints complete string
print (str[0])       # Prints first character of string
print (str[2:5])     # Prints characters starting from 3rd to 5th
print (str[2:])      # Prints string starting from 3rd character
print (str * 2)      # Prints string two times
print (str + "TEST") # Prints concatenated string
----------------------------------------------------------------------------
			Lists
----------------------------------------------------------------------------
Lists are the most versatile of Python's compound data types.
----------------------------------------------------------------------------
A list contains items separated by commas and enclosed within square 
brackets ([]). 
----------------------------------------------------------------------------
To some extent, lists are similar to arrays in C.
----------------------------------------------------------------------------
One difference between them is that all the items belonging to a list can 
be of different data type.
----------------------------------------------------------------------------
The values stored in a list can be accessed using the slice operator ([ ] 
and [:]) with indexes starting at 0 in the beginning of the list 
and working their way to end -1. 
----------------------------------------------------------------------------
The plus (+) sign is the list concatenation operator, and the asterisk 
(*) is the repetition operator.
----------------------------------------------------------------------------
			List Example:
----------------------------------------------------------------------------
list = [ 'abcd', 786 , 2.23, 'mba', 70.2 ]
tinylist = [123, 'mca']
print (list)          		# Prints complete list
print (list[0])       		# Prints first element of the list
print (list[1:3])     		# Prints elements starting from 2nd till 3rd 
print (list[2:])      		# Prints elements starting from 3rd element
print (tinylist * 2)  		# Prints list two times
print (list + tinylist) 	# Prints concatenated lists
----------------------------------------------------------------------------
A tuple is another sequence data type that is similar to the list.
----------------------------------------------------------------------------
A tuple consists of a number of values separated by commas. 
----------------------------------------------------------------------------
Unlike lists, however, tuples are enclosed within parentheses.
----------------------------------------------------------------------------
The main differences between lists and tuples are: 
----------------------------------------------------------------------------
Lists are enclosed in brackets ( [ ] ) and their elements and size can be 
changed, while tuples are enclosed in parentheses ( ( ) ) and cannot 
be updated. 
----------------------------------------------------------------------------
Tuples can be thought of as read-only lists.
----------------------------------------------------------------------------
			Tuples Example:
----------------------------------------------------------------------------
tuple = ( 'abcd', 786 , 2.23, 'mba', 70.2  )
tinytuple = (123, 'mca')
print (tuple)           	# Prints complete list
print (tuple[0])        	# Prints first element of list
print (tuple[1:3])      	# Prints elements starting from	2nd till 3rd 
print (tuple[2:])       	# Prints elements starting from	3rd element
print (tinytuple * 2)   	# Prints list two times
print (tuple + tinytuple) 	# Prints concatenated lists
----------------------------------------------------------------------------
The following code is invalid with tuple, because we attempted to update 
a tuple, which is not allowed. 
----------------------------------------------------------------------------
Similar case is possible with lists
----------------------------------------------------------------------------
Tuples Example: error will generated
----------------------------------------------------------------------------
tuple = ( 'abcd', 786 , 2.23, 'mba', 70.2  )
list = [ 'abcd', 786 , 2.23, 'mca', 70.2  ]
tuple[2] = 1000    # Invalid syntax with tuple
list[2] = 1000     # Valid syntax with list
----------------------------------------------------------------------------
Dictionary
----------------------------------------------------------------------------
Python's dictionaries are kind of hash table type. 
----------------------------------------------------------------------------
They work like associative arrays or hashes found in Perl and consist of 
key-value pairs. 
----------------------------------------------------------------------------
A dictionary key can be almost any Python type, but are usually numbers 
or strings. 
----------------------------------------------------------------------------
Values, on the other hand, can be any arbitrary Python object.
----------------------------------------------------------------------------
Dictionaries are enclosed by curly braces ({ }) and values can be assigned 
and accessed using square braces ([]).
----------------------------------------------------------------------------
Dictionary Example:
----------------------------------------------------------------------------
dict = {}
dict['one'] = "This is one"
dict[2]     = "This is two"
tinydict = {'name': 'mba','code':6734, 'dept': 'sales'}
print (dict['one'])       	# Prints value for 'one' key
print (dict[2])           	# Prints value for 2 key
print (tinydict)          	# Prints complete dictionary
print (tinydict.keys())   	# Prints all the keys
print (tinydict.values()) 	# Prints all the values
----------------------------------------------------------------------------
			Data Type Conversion
----------------------------------------------------------------------------
you may need to perform conversions between the built-in types
----------------------------------------------------------------------------
To convert between types, you simply use the type name as a function.
----------------------------------------------------------------------------
There are several built-in functions to perform conversion from one data 
type to another. 
----------------------------------------------------------------------------
These functions return a new object representing the converted value.
----------------------------------------------------------------------------
		1.	int(x [,base])
----------------------------------------------------------------------------
Converts x to an integer. base specifies the base if x is a string.
----------------------------------------------------------------------------
		2.	long(x [,base] )
----------------------------------------------------------------------------
Converts x to a long integer. 
----------------------------------------------------------------------------
base specifies the base if x is a string.
----------------------------------------------------------------------------
		3.	float(x)
----------------------------------------------------------------------------
Converts x to a floating-point number.
----------------------------------------------------------------------------
		4.	complex(real [,imag])
----------------------------------------------------------------------------
Creates a complex number.
----------------------------------------------------------------------------
		5.	str(x)
----------------------------------------------------------------------------
Converts object x to a string representation.
----------------------------------------------------------------------------
		6.	repr(x)
----------------------------------------------------------------------------
Converts object x to an expression string.
----------------------------------------------------------------------------
		7.	eval(str)
----------------------------------------------------------------------------
Evaluates a string and returns an object.
----------------------------------------------------------------------------
		8.	tuple(s)
----------------------------------------------------------------------------
Converts s to a tuple.
----------------------------------------------------------------------------
		9.	list(s)
----------------------------------------------------------------------------
Converts s to a list.
----------------------------------------------------------------------------
		10.	set(s)
----------------------------------------------------------------------------
Converts s to a set.
----------------------------------------------------------------------------
		11.	dict(d)
----------------------------------------------------------------------------
Creates a dictionary. d must be a sequence of (key,value) tuples.
----------------------------------------------------------------------------
		12.	frozenset(s)
----------------------------------------------------------------------------
Converts s to a frozen set.
----------------------------------------------------------------------------
		13	chr(x)
----------------------------------------------------------------------------
Converts an integer to a character.
----------------------------------------------------------------------------
		14.	unichr(x)
----------------------------------------------------------------------------
Converts an integer to a Unicode character.
----------------------------------------------------------------------------
		15.	ord(x)
----------------------------------------------------------------------------
Converts a single character to its integer value.
----------------------------------------------------------------------------
		16.	hex(x)
----------------------------------------------------------------------------
Converts an integer to a hexadecimal string.
----------------------------------------------------------------------------
		17.	oct(x)
----------------------------------------------------------------------------
Converts an integer to an octal string.
----------------------------------------------------------------------------
----------------------------------------------------------------------------





	
	






	




	

























