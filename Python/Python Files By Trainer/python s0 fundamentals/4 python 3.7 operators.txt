----------------------------------------------------------------------------
				Python Operators
-----------------------------------------------------------------------------
Arithmetic Operators
Comparison (Relational) Operators
Assignment Operators
Logical Operators
Bitwise Operators
Membership Operators
Identity Operators
-----------------------------------------------------------------------------
				Arithmetic Operators
-----------------------------------------------------------------------------
a + b = 30
a – b = -10
a * b = 200
b / a = 2
b % a = 0
a**b =10 
-----------------------------------------------------------------------------
// Operator
-----------------------------------------------------------------------------
Floor Division 
-----------------------------------------------------------------------------
The division of operands where the result is the quotient in which the 
digits after the decimal point are removed. 
-----------------------------------------------------------------------------
But if one of the operands is negative, the result is floored, i.e., 
rounded away from zero (towards negative infinity) -
-----------------------------------------------------------------------------
9//2 = 4 
-----------------------------------------------------------------------------
9.0//2.0 = 4.0
-----------------------------------------------------------------------------
-11//3 = -4
-----------------------------------------------------------------------------
-11.0//3 = -4.0
-----------------------------------------------------------------------------
Operators Example:
-----------------------------------------------------------------------------
a = 21
b = 10
c = 0
c = a + b
print (c)
c = a - b
print (c)
c = a * b
print (c)
c = a / b
print (c)
c = a % b
print (c)
a = 2
b = 3
c = a**b 
print (c)
a = 10
b = 5
c = a//b 
print (c)
-----------------------------------------------------------------------------
				Relational Operators
-----------------------------------------------------------------------------
==
-----------------------------------------------------------------------------
If the values of two operands are equal, then the condition becomes true.
-----------------------------------------------------------------------------
(a == b) is not true
-----------------------------------------------------------------------------
!=
-----------------------------------------------------------------------------
If values of two operands are not equal, then condition becomes true
-----------------------------------------------------------------------------
(a != b) is true
-----------------------------------------------------------------------------
<>
-----------------------------------------------------------------------------
If values of two operands are not equal, then condition becomes true
-----------------------------------------------------------------------------
(a <> b) is true. This is similar to != operator.
-----------------------------------------------------------------------------
>
-----------------------------------------------------------------------------
If the value of left operand is greater than the value of right operand, 
then condition becomes true.
-----------------------------------------------------------------------------
(a > b) is not true
-----------------------------------------------------------------------------
<
-----------------------------------------------------------------------------
If the value of left operand is less than the value of right operand, 
then condition becomes true.
-----------------------------------------------------------------------------
(a < b) is true
-----------------------------------------------------------------------------
>=
-----------------------------------------------------------------------------
If the value of left operand is greater than or equal to the value of 
right operand, then condition becomes true.
-----------------------------------------------------------------------------
(a >= b) is not true
-----------------------------------------------------------------------------
<=
-----------------------------------------------------------------------------
If the value of left operand is less than or equal to the value of right 
operand, then condition becomes true.
-----------------------------------------------------------------------------
(a <= b) is true
-----------------------------------------------------------------------------
Relational Operators Example:
-----------------------------------------------------------------------------
a = 21
b = 10
c = 0
if ( a == b ):
   print ("a is equal to b")
else:
   print ("a is not equal to b")
if ( a != b ):
   print ("a is not equal to b")
else:
   print ("a is equal to b")
if ( a <> b ):
   print "a is not equal to b")
else:
   print ("a is equal to b")
if ( a < b ):
   print ("a is less than b" )
else:
   print ("a is not less than b")
if ( a > b ):
   print ("a is greater than b")
else:
   print ("a is not greater than b")
-----------------------------------------------------------------------------
Relational Operators Example:
-----------------------------------------------------------------------------
a = 5;
b = 20;
if ( a <= b ):
   print ("a is either less than or equal to  b")
else:
   print ("a is neither less than nor equal to  b")
if ( b >= a ):
   print ("b is either greater than  or equal to b")
else:
   print ("b is neither greater than  nor equal to b")
-----------------------------------------------------------------------------
Short Assignments of the Operators: Example:
-----------------------------------------------------------------------------
a = 21
b = 10
c = 0
c = a + b
print ("Value of c is ", c)
c += a
print ("Value of c is ", c)
c *= a
print ("Value of c is ", c)
c /= a 
print ("Value of c is ", c)
c  = 2
c %= a
print ("Value of c is ", c)
c **= a
print ("Value of c is ", c)
c //= a
print ("Value of c is ", c)
-----------------------------------------------------------------------------
				Logical Operators
-----------------------------------------------------------------------------
and Logical AND
-----------------------------------------------------------------------------
If both the operands are true then condition becomes true
-----------------------------------------------------------------------------
(a and b) is true
-----------------------------------------------------------------------------
or Logical OR
-----------------------------------------------------------------------------
If any of the two operands are non-zero then condition becomes true.
-----------------------------------------------------------------------------
(a or b) is true
-----------------------------------------------------------------------------
not Logical NOT
-----------------------------------------------------------------------------
Used to reverse the logical state of its operand.
-----------------------------------------------------------------------------
Not(a and b) is false.
-----------------------------------------------------------------------------
				Bitwise Operators
-----------------------------------------------------------------------------
Bitwise operator works on bits and performs bit by bit operation. 
-----------------------------------------------------------------------------
Assume if a = 60; and b = 13; Now in binary format they will be as 
follows :
-----------------------------------------------------------------------------
a = 0011 1100
b = 0000 1101
-----------------
a&b = 0000 1100
-----------------------------------------------------------------------------
a|b = 0011 1101
-----------------------------------------------------------------------------
a^b = 0011 0001
-----------------------------------------------------------------------------
~a  = 1100 0011
-----------------------------------------------------------------------------
& Binary AND
-----------------------------------------------------------------------------
Operator copies a bit to the result if it exists in both operands
-----------------------------------------------------------------------------
(a & b) (means 0000 1100)
-----------------------------------------------------------------------------
| Binary OR
-----------------------------------------------------------------------------
It copies a bit if it exists in either operand.
-----------------------------------------------------------------------------
(a | b) = 61 (means 0011 1101)
-----------------------------------------------------------------------------
^ Binary XOR
-----------------------------------------------------------------------------
It copies the bit if it is set in one operand but not both.
-----------------------------------------------------------------------------
(a ^ b) = 49 (means 0011 0001)
-----------------------------------------------------------------------------
~ Binary Ones Complement
-----------------------------------------------------------------------------
It is unary and has the effect of 'flipping' bits.
-----------------------------------------------------------------------------
(~a ) = -61 (means 1100 0011 in 2's complement form due to a signed binary 
number
-----------------------------------------------------------------------------
<< Binary Left Shift
-----------------------------------------------------------------------------
The left operands value is moved left by the number of bits specified 
by the right operand.
-----------------------------------------------------------------------------
a << 2 = 240 (means 1111 0000)
-----------------------------------------------------------------------------
>> Binary Right Shift
-----------------------------------------------------------------------------
The left operands value is moved right by the number of bits specified 
by the right operand
-----------------------------------------------------------------------------
a >> 2 = 15 (means 0000 1111)
-----------------------------------------------------------------------------
Bitwise Operators Example:
-----------------------------------------------------------------------------
a = 60            # 60 = 0011 1100 
b = 13            # 13 = 0000 1101 
c = 0

c = a & b;        # 12 = 0000 1100
print ("Value of c is ", c)

c = a | b;        # 61 = 0011 1101 
print ("Value of c is ", c)

c = a ^ b;        # 49 = 0011 0001
print ("Value of c is ", c)

c = ~a;           # -61 = 1100 0011
print ("Value of c is ", c)

c = a << 2;       # 240 = 1111 0000
print ("Value of c is ", c)

c = a >> 2;       # 15 = 0000 1111
print ("Value of c is ", c)
-----------------------------------------------------------------------------
				Membership Operators
-----------------------------------------------------------------------------
in
-----------------------------------------------------------------------------
Evaluates to true if it finds a variable in the specified sequence and 
false otherwise.
-----------------------------------------------------------------------------
x in y, here in results in a 1 if x is a member of sequence y.
-----------------------------------------------------------------------------
not in
-----------------------------------------------------------------------------
Evaluates to true if it does not finds a variable in the specified 
sequence and false otherwise.
-----------------------------------------------------------------------------
x not in y, here not in results in a 1 if x is not a member of sequence y.
-----------------------------------------------------------------------------
Membership Operators Example:
-----------------------------------------------------------------------------
a = 10
b = 20
list = [1, 2, 3, 4, 5 ];

if ( a in list ):
   print ("a is available in the given list")
else:
   print ("a is not available in the given list")

if ( b not in list ):
   print ("b is not available in the given list")
else:
   print ("b is available in the given list")

a = 2
if ( a in list ):
   print ("a is available in the given list")
else:
   print ("a is not available in the given list")
-----------------------------------------------------------------------------
				Identity Operators
-----------------------------------------------------------------------------
is
-----------------------------------------------------------------------------
Evaluates to true if the variables on either side of the operator point 
to the same object and false otherwise.
-----------------------------------------------------------------------------
is not
-----------------------------------------------------------------------------
Evaluates to false if the variables on either side of the operator point 
to the same object and true otherwise.
-----------------------------------------------------------------------------
x is not y, here is not results in 1 if id(x) is not equal to id(y).
-----------------------------------------------------------------------------
Identity Operators Example:
-----------------------------------------------------------------------------
a = 20
b = 20
if ( a is b ):
   print ("a and b have same identity")
else:
   print ("a and b do not have same identity")
if ( id(a) == id(b) ):
   print ("a and b have same identity")
else:
   print ("a and b do not have same identity")
b = 30
if ( a is b ):
   print ("a and b have same identity")
else:
   print ("a and b do not have same identity")
if ( a is not b ):
   print ("a and b do not have same identity")
else:
   print ("a and b have same identity")
-----------------------------------------------------------------------------
Operators Priority Example:
-----------------------------------------------------------------------------
a = 20
b = 10
c = 15
d = 5
e = 0

e = (a + b) * c / d       #( 30 * 15 ) / 5
print ("Value of (a + b) * c / d is ",  e)

e = ((a + b) * c) / d     # (30 * 15 ) / 5
print ("Value of ((a + b) * c) / d is ",  e)

e = (a + b) * (c / d);    # (30) * (15/5)
print ("Value of (a + b) * (c / d) is ",  e)

e = a + (b * c) / d;      #  20 + (150/5)
print ("Value of a + (b * c) / d is ",  e)
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
